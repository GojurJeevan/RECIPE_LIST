/*!
 * opensearch - lib/client.js
 * Copyright(c) 2013 Tmall.com
 * Author: tangyao <tangyao@alibaba-inc.com>
 */

'use strict';

/**
 * Module dependencies.
 */
var utils = require('./utils');
var urlutil = require('url');
var path = require('path');
var urllib = require('urllib');
var debug = require('debug')('client');

var SIGN_MODE = 1;
var DEFAULT_PAGE_SIZE = 10;
var DEFAULT_INDEX_TABLE_NAME = 'main';

function CloudSearchClient(clientId, clientSecret, apiURL, version) {
  this.clientId = clientId;
  this.clientSecret = clientSecret;
  this.apiURL = apiURL || 'http://css.aliyun.com';
  this.version = version || 'v1';
  this.format = 'json';
  this.timeout = 3000;
  this.dataType = 'json';
  this.serverURL = urlutil.resolve(this.apiURL, path.join(this.version, 'api')) + '/';
};

/**
 * 搜索文档
 * @public
 * @param {String} indexName  索引名称(应用名称)
 * @param {Object} queryParams 参数列表
 */
CloudSearchClient.prototype.search = function (indexName, queryParams, callback) {
  var url = urlutil.resolve(this.serverURL, path.join('search', indexName));
  this.apiCall(url, queryParams, callback);
};

/**
 * 列出所有索引
 * @public
 * @param {Integer} page 列表页码
 * @param {Integer} pageSize 每页条数
 * @return String
 */
CloudSearchClient.prototype.listIndexes = function (page, pageSize, callback) {
  if (typeof page === 'function') {
    callback = page;
    page = 1;
    pageSize = 10;
  } else if (typeof pageSize === 'function') {
    callback = pageSize;
    pageSize = 10;
  }
  page = page || 1;
  pageSize = pageSize || 10;
  var url = urlutil.resolve(this.serverURL, 'index');
  var queryParams = {
    page: String(page),
    page_size: String(pageSize)
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 根据id获得文档内容
 * @public
 * @param {String} indexName  索引名称
 * @param {String} docId 文档id
 */
CloudSearchClient.prototype.getDocById = function (indexName, docId, callback) {
  var url = urlutil.resolve(this.serverURL, path.join('/index/doc', indexName));
  var queryParams = {id: docId};
  this.apiCall(url, queryParams, callback);
};

/**
 * 获取错误信息
 * @public
 * @param {String} indexName  索引名称
 * @param {Integer} page 错误页码
 * @param {Integer} pageSize 错误信息每页条数
 * @param {String} sortMode 错误信息 排序方式DESC,ACS
 */
CloudSearchClient.prototype.getErrorMessage = function (indexName, page, pageSize, sortMode, callback) {
  if (typeof page === 'function') {
    callback = page;
    page = 1;
    pageSize = 10;
    sortMode = null;
  } else if (typeof pageSize === 'function') {
    callback = pageSize;
    pageSize = 10;
    sortMode = null;
  } else if (typeof sortMode === 'function') {
    callback = sortMode;
    sortMode = null;
  }
  
  page = page || 1;
  pageSize = pageSize || 10;
  sortMode = sortMode || null;

  var url = urlutil.resolve(this.serverURL, path.join('/index/error', indexName));
  var queryParams = {
    page: String(page),
    page_size: String(pageSize),
    sort_mode: sortMode
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 获得搜索频繁词
 *
 * @public
 * @param {String} index_name  索引名称
 * @param {Integer} num 返回总条数 （有总数限制，不能过大）
 * @param {Integer} days 返回统计
 */
CloudSearchClient.prototype.getTopQuery = function (indexName, num, days, callback) {
  if (typeof num === 'function') {
    callback = num;
    num = 10;
    days = 7;
  } else if (typeof days === 'function') {
    callback = days;
    days = 7;
  }

  num = num || 10;
  days = days || 7;

  var url = urlutil.resolve(this.serverURL, paht.join('/top/query', indexName));
  var queryParams = {
    num: String(num),
    days: String(days)
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 上传文档
 * @public
 * @param {String} index_name  索引名称
 * @param  {String} docs  文档内容，需要json_encode 
 *      example: [{cmd: "add", fields: {"test": "3", "test1": "4"}}]               
 * @return string
 */
CloudSearchClient.prototype.pushDoc = function (indexName, docs, tableName, callback) {
  var url = urlutil.resolve(this.serverURL, paht.join('/index/doc', indexName));
  var queryParams = {
    items: docs,
    action: 'push',
    sign_mode: String(SIGN_MODE),
    table_name: tableName
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 创建索引
 * @public
 * @param {String} indexName  索引名称
 * @param {String} template  模版名称
 */
CloudSearchClient.prototype.createIndex = function (indexName, template, callback) {
  var url = urlutil.resolve(this.serverURL, paht.join('/index', indexName));
  var queryParams = {
    action: 'create',
    template: template
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 删除索引
 * @public
 * @param {String} indexName 索引名称
 */
CloudSearchClient.prototype.deleteIndex = function (indexName, callback) {
  var url = urlutil.resolve(this.serverURL, paht.join('/index', indexName));
  var queryParams = {
    action: 'delete'
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 更新索引
 * @public
 * @param {String} indexName 索引名称
 * @param {String} newIndexName 更新后索引名称
 * @param {String} des 更新索引描述 可选
 */
CloudSearchClient.prototype.updateIndex = function (indexName, newIndexName, des, callback) {
  if (typeof des === 'function') {
    callback = des;
    des = null;
  }
  var queryParams = {
    new_index_name: newIndexName,
    action: 'update',
    description: des
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 获取索引状态
 * @public
 * @param {String} indexName 索引名称
 */
CloudSearchClient.prototype.getIndexStatus = function (indexName, callback) {
  var url = urlutil.resolve(this.serverURL, paht.join('/index', indexName));
  var queryParams = {
    action: 'status'
  };
  this.apiCall(url, queryParams, callback);
};

/**
 * 请求服务器api
 * @public
 * @param  {String}   url         请求的api地址
 * @param  {Object}   queryParams 参数数组
 */
CloudSearchClient.prototype.apiCall = function (url, queryParams, callback) {
  queryParams = queryParams || {};
  queryParams.format = this.format;
  queryParams.client_id = this.clientId;
  queryParams.version = this.version;
  queryParams.nonce = this._makeNonce();
  queryParams.sign = this._makeSign(queryParams);
  // requestByPost(url, queryParams, httpOptions, callback);
  urllib.request(url, {
    method: 'POST',
    data: queryParams,
    timeout: this.timeout,
    dataType: this.dataType
  }, function (err, data, res) {
    callback(err, data);
  });
};

/**
 * 创建Nonce信息。
 * @private
 */
CloudSearchClient.prototype._makeNonce = function () {
  var time = parseInt(new Date().getTime() / 1000);
  return utils.md5(this.clientId + this.clientSecret + time) + '.' + time;
}

/**
 * 根据参数创建签名信息。
 * @private
 * @param {Object} 参数数组。
 * @return {string} 签名字符串。
 */
CloudSearchClient.prototype._makeSign = function (params) {
  var q = '';
  if (params) {
    if ('1' === params.sign_mode && params.items) {
      delete params.items;
    }
    var keys = Object.keys(params);
    keys.sort();
    var _p = {};
    for (var i = 0, len = keys.length; i < len; i++) {
      var key = keys[i];
      _p[key] = params[key];
    }
    q = utils.querystring(_p);
    if (debug.enabled) {
      debug('_makeSign', q);
    }
  }
  return utils.md5(q + this.clientSecret);
}

module.exports = CloudSearchClient;
